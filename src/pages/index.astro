---
import Layout from '../layouts/Layout.astro';
import ProfilePicSelector from '../components/ProfilePicSelector';
import DvdEasterEgg from '../components/DvdEasterEgg';

// Define the purple color from the template
const purpleColor = '#1237EA';
const blackColor = 'rgb(0, 0, 0)';
const defaultTextColor = 'rgb(0, 0, 0)'; // As seen in template links/text
const hubspotIconBase = 'https://cdn2.hubspot.net/hubfs/53/tools/email-signature-generator/icons/';
const logoUrl = '/signature-generator/tectonic.png';

const people = [
{ name: 'Pieterjan', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931d18472a10587f4a48_pieterjan.webp' },
    { name: 'Samuel', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931d77b380aafa9b6173_samuel.webp' },
    { name: 'Emilie', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/6875647c9b8a0f94817562ce_IMG_2114.jpg' },
    { name: 'Mohamed', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931d2003ed7a9e38adf5_mohamed.webp' },
    { name: 'Kato', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/6874d9b2a4b9e37feb5fdf75_kato2.jpg' },
{name: "YaÃ«l", url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/6874d9b270350771650744bb_yael.jpg'},
{name:"Aakash", url: "https://cdn.prod.website-files.com/638782a43f80a9862648eed7/6874d9b3ca204b038c8f4889_aakash.jpg"},
{name: "Hanne", url: "https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931dd548e47c08762992_hanne.webp"},
    { name: 'Stef-Kamil', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/6874d9b3c035d8ad8c9a0e9b_sk.jpg'},
    { name: 'Axel', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/67f3f77fd18dbe8351448984_axel.jpg' },
    { name: 'Juliette', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/6804fbacff8442fde213a390_juliette.jpeg' },
    { name: 'Lucas', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931d4b59fe6b4f6b424f_lucas.webp' },
    { name: 'Nathan', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/67f3f77e5db6ba6063bdb32f_nathan.jpg' },
{name: "Marie", url: "https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931de332078fd9dfd18e_marie.webp"},
    { name: 'Ryan', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931dcbed907cb67dce94_ryan.webp' },
    { name: 'Garvit', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931d401695e5fe7e1b38_garvit.webp' },
    { name: 'Tijl', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/67f3f77ef8ce629b51a7b9ff_tijl.jpg' },
    { name: 'Michiel', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e932030627aeffcf04b02_michiel.webp' },
    { name: 'Arthur', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931e1617cc889fcf9a1a_arthur.webp' },
{ name: 'Filip', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931de332078fd9dfd18b_filip.webp' },
{ name: 'Ani', url: 'https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931d6d7afde310b01242_anirudh.webp' },
{name: "Daan", url: "https://cdn.prod.website-files.com/638782a43f80a9862648eed7/685e931d83ef61c967e49b8e_daan.webp"}
];
---

<Layout title="Tectonic Signature Generator">
    <div class="container">
        <h1>Tectonic Signature Generator</h1>
        <div class="form-section">
            <h2>Enter Your Details</h2>
			
            <div class="form-grid">
                <label for="name">Name:</label>
                <input type="text" id="name" value="Filip Nowak" />

                <label for="title">Title:</label>
                <input type="text" id="title" value="IT Lead" />

                <label for="organization">Organization:</label>
                <input type="text" id="organization" value="Tectonic" />

                <label for="phone">Mobile Phone:</label>
                <input type="text" id="phone" value="+32 472 71 71 72" />

                <label for="email">Email Address:</label>
                <input type="email" id="email" value="filip@tectonicconf.eu" />

                <label for="website">Website URL:</label>
                <input type="text" id="website" value="https://www.tectonicconf.eu" placeholder="Include https://" />

                <label for="profilePicUrl">Profile Picture:</label>
                <div>
                    <!-- React component for profile picture selection -->
                    <ProfilePicSelector client:load people={people} />
                </div>
                <input type="hidden" id="profilePicUrl" value="" />

                <label for="facebookUrl">Facebook URL:</label>
                <input type="text" id="facebookUrl" value="https://www.facebook.com/tectoniceu" placeholder="Optional: Enter full Facebook URL" />

                <label for="linkedinUrl">LinkedIn URL:</label>
                <input type="text" id="linkedinUrl" value="https://www.linkedin.com/company/tectonicconf" placeholder="Optional: Enter full LinkedIn URL" />

                <label for="instagramUrl">Instagram URL:</label>
                <input type="text" id="instagramUrl" value="https://www.instagram.com/tectoniceu" placeholder="Optional: Enter full Instagram URL" />
            </div>
        </div>

        <div class="preview-section">
            <h2>Preview (Highlight and copy the text below)</h2>
            <div id="signature-preview" class="signature-container">
                <!-- Signature will be generated here -->
            </div>
             <textarea id="signature-html-output" rows="10" style="width: 100%; margin-top: 15px; font-family: monospace; font-size: 12px; display: none;"></textarea>
             <button id="show-html-button" style="margin-top: 5px;">Show/Hide HTML</button>
        </div>
    </div>
    
    <!-- DVD Easter Egg -->
    <DvdEasterEgg client:load people={people} selectedImageUrl="" />
</Layout>

<style define:vars={{ purpleColor, blackColor, defaultTextColor }}>
/* General page styles */
body {
    font-family: Arial, sans-serif;
    margin: 20px;
    background-color: #f4f4f4;
    color: #333;
}
.container {
    max-width: 1200px;
    margin: auto;
    background: #fff;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}
h1, h2 {
    color: #333;
    text-align: center;
    margin-bottom: 20px;
}
.form-section { margin-bottom: 30px; }
.form-grid { display: grid; grid-template-columns: 1fr 3fr; gap: 15px; align-items: center; }
.form-grid label { font-weight: bold; text-align: right; }
.form-grid input[type="text"], .form-grid input[type="email"] { width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; }
.preview-section { margin-top: 30px; border-top: 1px solid #eee; padding-top: 30px; }
#show-html-button { display: inline-block; margin: 20px 10px 10px 0; padding: 12px 25px; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; transition: background-color 0.3s ease; }
#show-html-button { background-color: #5bc0de; }
#show-html-button:hover { background-color: #46b8da; }

/* Preview styles */
.signature-container {
    border: 1px solid #ddd;
    padding: 20px;
    background-color: #fff;
    border-radius: 5px;
    margin-bottom: 20px;
    max-width: 650px; /* Adjusted for content */
    margin-left: auto;
    margin-right: auto;
    font-family: Tahoma, Arial, sans-serif; /* Match template font */
    font-size: 12px; /* Match template base font size */
    color: var(--defaultTextColor);
}
</style>

<script define:vars={{ purpleColor, blackColor, defaultTextColor, hubspotIconBase, logoUrl }}>
    // Ensure script runs after DOM is loaded
    const nameInput = document.getElementById('name');
    const titleInput = document.getElementById('title');
    const organizationInput = document.getElementById('organization');
    const phoneInput = document.getElementById('phone');
    const emailInput = document.getElementById('email');
    const websiteInput = document.getElementById('website');
    const profilePicUrlInput = document.getElementById('profilePicUrl'); // Hidden input
    const facebookUrlInput = document.getElementById('facebookUrl');
    const linkedinUrlInput = document.getElementById('linkedinUrl');
    const instagramUrlInput = document.getElementById('instagramUrl');

    const previewContainer = document.getElementById('signature-preview');
    const htmlOutput = document.getElementById('signature-html-output');
    const showHtmlButton = document.getElementById('show-html-button');

    // All inputs that should trigger updatePreview when changed
    const allInputs = [nameInput, titleInput, organizationInput, phoneInput, emailInput, websiteInput, profilePicUrlInput, facebookUrlInput, linkedinUrlInput, instagramUrlInput];

    // Get the DVD Easter Egg component and update the selected image URL when it changes
    const updateDvdEasterEggSelectedImage = () => {
        // This custom event will be picked up by the React component
        const event = new CustomEvent('profilePicUrlChanged', { 
            detail: { url: profilePicUrlInput.value }
        });
        document.dispatchEvent(event);
    };

    // Listen for changes to the profile pic URL
    profilePicUrlInput.addEventListener('input', updateDvdEasterEggSelectedImage);

    function generateSignatureHtml() {
        // Get values from input fields
        const name = nameInput.value.trim().replace(/\s/g, '&nbsp;'); // Replace spaces with &nbsp; like template name
        const title = titleInput.value.trim().replace(/\s/g, '&nbsp;').replace(/'/g, '&#39;'); // Apply encoding like name/org
        const organization = organizationInput.value.trim().replace(/'/g, '&#39;'); // Match template encoding for apostrophe
        const phone = phoneInput.value.trim();
        const email = emailInput.value.trim();
        const website = websiteInput.value.trim(); // Expecting full URL with https://
        const profilePicUrl = profilePicUrlInput.value.trim();
        const facebookUrl = facebookUrlInput.value.trim();
        const linkedinUrl = linkedinUrlInput.value.trim();
        const instagramUrl = instagramUrlInput.value.trim();

        // --- START Exact HTML construction based on PROVIDED EMAIL SOURCE ---

        // Profile Picture Part - Use input URL, match template structure
        let profilePicHtml = '';
        if (profilePicUrl) {
            profilePicHtml = `
                    <td width="150" style="vertical-align:middle">
                        <span style="margin-right:20px;display:block">
                            <img src="${profilePicUrl}" alt="" width="130" style="max-width:130px">
                        </span>
                    </td>`;
        } else {
            profilePicHtml = `<td width="150" style="vertical-align:middle">&nbsp;</td>`; // Keep cell for structure
        }

        // Contact Info Part - Match template structure and styles exactly
        const phoneHtml = phone ? `
                <tr style="vertical-align:middle">
                    <td width="30" style="vertical-align:middle">
                        <table border="0" cellspacing="0" cellpadding="0" style="vertical-align:-webkit-baseline-middle"><tbody><tr><td style="vertical-align:bottom">
                            <span style="display:inline-block;background-color:${purpleColor}">
                                <img src="${hubspotIconBase}phone-icon-2x.png" alt="mobilePhone" width="13" style="display:block">
                            </span>
                        </td></tr></tbody></table>
                    </td>
                    <td style="padding:0px;color:${defaultTextColor}">
                        <a style="color:${defaultTextColor};font-size:12px">${phone}</a>
                    </td>
                </tr>` : '';

        const emailHtml = email ? `
                <tr style="vertical-align:middle">
                    <td width="30" style="vertical-align:middle">
                        <table border="0" cellspacing="0" cellpadding="0" style="vertical-align:-webkit-baseline-middle"><tbody><tr><td style="vertical-align:bottom">
                            <span style="display:inline-block;background-color:${purpleColor}">
                                <img src="${hubspotIconBase}email-icon-2x.png" alt="emailAddress" width="13" style="display:block">
                            </span>
                        </td></tr></tbody></table>
                    </td>
                    <td style="padding:0px">
                        <a href="mailto:${email}" style="color:${defaultTextColor};font-size:12px" target="_blank">${email}</a>
                    </td>
                </tr>` : '';

        const websiteHtml = website ? `
                <tr style="vertical-align:middle">
                    <td width="30" style="vertical-align:middle">
                        <table border="0" cellspacing="0" cellpadding="0" style="vertical-align:-webkit-baseline-middle"><tbody><tr><td style="vertical-align:bottom">
                            <span style="display:inline-block;background-color:${purpleColor}">
                                <img src="${hubspotIconBase}link-icon-2x.png" alt="website" width="13" style="display:block">
                            </span>
                        </td></tr></tbody></table>
                    </td>
                    <td style="padding:0px">
                        <a href="${website}" style="color:${defaultTextColor};font-size:12px" target="_blank">${website}</a>
                    </td>
                </tr>` : '';

        // Social Media Icons Part - Match template structure and styles exactly
        let socialIconsInnerHtml = '';
        const socialLinks = [
            { url: facebookUrl, icon: 'facebook-icon-2x.png', alt: 'facebook' },
            { url: linkedinUrl, icon: 'linkedin-icon-2x.png', alt: 'linkedin' },
            { url: instagramUrl, icon: 'instagram-icon-2x.png', alt: 'instagram' },
        ];

        socialLinks.forEach((link, index) => {
            if (link.url) {
                socialIconsInnerHtml += `
                    <td>
                        <a href="${link.url}" style="display:inline-block;padding:0px;background-color:${blackColor}" target="_blank">
                            <img src="${hubspotIconBase}${link.icon}" alt="${link.alt}" width="24" style="max-width:135px;display:block">
                        </a>
                    </td>`;
                const hasNextLink = socialLinks.slice(index + 1).some(l => l.url);
                if (hasNextLink) {
                    socialIconsInnerHtml += `<td width="5">&nbsp;</td>`;
                }
            }
        });
        // Final spacer according to template structure if any icons exist
        if (socialIconsInnerHtml) {
             socialIconsInnerHtml += `<td width="5">&nbsp;</td>`;
        }

        const socialIconsTableHtml = socialIconsInnerHtml ? `
                        <table border="0" cellspacing="0" cellpadding="0" style="display:inline-block;vertical-align:-webkit-baseline-middle">
                            <tbody>
                                <tr>${socialIconsInnerHtml}</tr>
                            </tbody>
                        </table>` : '';

        // Assemble the final signature HTML exactly like the email source template
        const signatureHtml = `
<div dir="ltr" class="gmail_signature" data-smartmail="gmail_signature">
<div dir="ltr">
    <table border="0" cellspacing="0" cellpadding="0" style="vertical-align:-webkit-baseline-middle;font-family:Tahoma">
        <tbody>
            <tr>
                <td>
                    <table border="0" cellspacing="0" cellpadding="0" style="vertical-align:-webkit-baseline-middle">
                        <tbody>
                            <tr>
                                ${profilePicHtml}
                                <td style="vertical-align:middle">
                                    <h2 style="margin:0px;font-size:16px;color:${blackColor}">${name}</h2>
                                    <p style="margin:0px;color:${defaultTextColor};font-size:12px;line-height:20px">${title}</p>
                                    <p style="margin:0px;color:${defaultTextColor};font-size:12px;line-height:20px">${organization}</p>
                                </td>
                                <td width="10">&nbsp;</td>
                                <td width="1" height="auto" style="width:1px;border-bottom:none;border-left:1px solid ${purpleColor}">&nbsp;</td>
                                <td width="10">&nbsp;</td>
                                <td style="vertical-align:middle">
                                    <table border="0" cellspacing="0" cellpadding="0" style="vertical-align:-webkit-baseline-middle">
                                        <tbody>
                                            ${phoneHtml}
                                            ${emailHtml}
                                            ${websiteHtml}
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <table border="0" cellspacing="0" cellpadding="0" style="width:573.016px;vertical-align:-webkit-baseline-middle">
                        <tbody>
                            <tr><td height="10">&nbsp;</td></tr>
                            <tr><td width="auto" height="1" style="width:573.016px;border-bottom:1px solid ${purpleColor};border-left:none;display:block">&nbsp;</td></tr>
                            <tr><td height="10">&nbsp;</td></tr>
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr>
                <td>
                    <table border="0" cellspacing="0" cellpadding="0" style="width:573.016px;vertical-align:-webkit-baseline-middle">
                        <tbody>
                            <tr>
                                <td style="vertical-align:middle">
                                    <span style="display:inline-block;padding:10px;">
                                        <img src="${logoUrl}" alt="" width="130" style="display:block;max-width:130px">
                                    </span>
                                </td>
                                <td style="text-align:right;vertical-align:middle">
                                    ${socialIconsTableHtml}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
            <tr></tr>
        </tbody>
    </table>
</div>
</div>`;

        return signatureHtml;
    }

    function updatePreview() {
        const generatedHtml = generateSignatureHtml();

        // Directly use the generated HTML for the visual preview
        // No need to add preview classes or remove styles anymore
        previewContainer.innerHTML = generatedHtml;

        // Update the hidden textarea with the raw, unstyled HTML for copying
        htmlOutput.value = generatedHtml;
        
        // Update DVD Easter Egg with the current profile pic
        updateDvdEasterEggSelectedImage();
    }

    // Function to update the preview based *only* on the textarea content
    function updatePreviewFromTextArea() {
        const currentHtml = htmlOutput.value;
        // Directly use the HTML from the textarea for the preview,
        // assuming it contains all necessary inline styles.
        previewContainer.innerHTML = currentHtml;
    }

    // Add event listeners to update preview on input change
    allInputs.forEach(input => {
        input.addEventListener('input', updatePreview); // Update preview AND textarea
    });

    // Add event listener for the HTML textarea
    htmlOutput.addEventListener('input', updatePreviewFromTextArea); // Update only preview

    // Toggle HTML output visibility
     showHtmlButton.addEventListener('click', () => {
         htmlOutput.style.display = htmlOutput.style.display === 'none' ? 'block' : 'none';
     });

    // Initial preview generation on load
    updatePreview();
</script>
